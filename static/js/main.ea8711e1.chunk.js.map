{"version":3,"sources":["Grid.js","App.js","index.js"],"names":["GridRow","_ref","button","startingCorner","numCols","liveCells","disabled","click","row","cells","i","y","react_default","a","createElement","onClick","bind","cell","classNames","e","className","key","push","Grid","props","rows","x","numRows","Grid_GridRow","Object","assign","messages","DOWN_KEYCODE","UP_KEYCODE","LEFT_KEYCODE","RIGHT_KEYCODE","GameButton","text","customStyles","concat","MessageHeader","_ref2","hasStarted","App","state","toggleLife","_this","setState","toggleCell","j","newCells","removeCell","insertCell","clearLiveCells","moveWindow","preventDefault","newStartingCorner","keyCode","_this2","this","window","addEventListener","setInterval","tick","removeEventListener","liveNeighbours","deadNeighbours","currRow","currCol","undefined","keys","length","total","forEach","rowStr","_this3","newLiveCells","colStr","_ref3","parseInt","_this3$findNeighbours","findNeighbours","deadCell","countTotalLiveCells","_this$state","Fragment","App_MessageHeader","src_Grid","App_GameButton","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"uKAEMA,EAAU,SAAAC,GAWd,IAJI,IAEAC,EARJC,EAMIF,EANJE,eACAC,EAKIH,EALJG,QACAC,EAIIJ,EAJJI,UACAC,EAGIL,EAHJK,SACAC,EAEIN,EAFJM,MACAC,EACIP,EADJO,IAEIC,EAAQ,GAGHC,EAAIP,EAAeQ,EAAGD,EAAIP,EAAeQ,EAAIP,EAASM,IAAK,CAClER,EAASU,EAAAC,EAAAC,cAAA,UAAQR,SAAUA,EAAUS,QAASR,EAAMS,YAAWR,EAAKE,KAEpE,IAAIO,EACAC,EAAa,YACjBA,GAAeZ,EAAsB,GAAX,SAE1B,IACMD,EAAUG,GAAKE,KACjBQ,GAAc,SAEhB,MAAOC,IAETF,EACEL,EAAAC,EAAAC,cAAA,OAAKM,UAAWF,EAAYG,IAAKX,GAC9BR,GAILO,EAAMa,KAAKL,GAEb,OAAOL,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YAAf,IAA4BX,IAetBc,EAZF,SAAAC,GAEX,IADA,IAAIC,EAAO,GAELf,EAAIc,EAAMrB,eAAeuB,EAC7BhB,EAAIc,EAAMrB,eAAeuB,EAAIF,EAAMG,QACnCjB,IAEAe,EAAKH,KAAKV,EAAAC,EAAAC,cAACc,EAADC,OAAAC,OAAA,CAAST,IAAKX,EAAGF,IAAKE,GAAOc,KAEzC,OAAOZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QAAQK,IC3C1BM,EACE,iCADFA,EAEG,0BAFHA,EAGS,sDAHTA,EAIG,sCAGHC,EAAe,GACfC,EAAa,GACbC,EAAe,GACfC,EAAgB,GAEhBC,EAAa,SAAAnC,GAAA,IAAEoC,EAAFpC,EAAEoC,KAAM9B,EAARN,EAAQM,MAAO+B,EAAfrC,EAAeqC,aAAchC,EAA7BL,EAA6BK,SAA7B,OACjBM,EAAAC,EAAAC,cAAA,OAAKM,UAAS,eAAAmB,OAAiBD,IAC7B1B,EAAAC,EAAAC,cAAA,UAAQC,QAASR,EAAOD,SAAUA,GAChCM,EAAAC,EAAAC,cAAA,SAAIuB,MAKJG,EAAgB,SAAAC,GACpB,OADsCA,EAAhBC,WAGlB9B,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAIiB,GACJnB,EAAAC,EAAAC,cAAA,SAAIiB,IAKRnB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAIiB,GACJnB,EAAAC,EAAAC,cAAA,SAAIiB,KAqOKY,6MA/NbC,MAAQ,CACNzC,eAAgB,CACduB,EAAG,EACHf,EAAG,GAELN,UAAW,GACXqC,YAAY,EACZf,QAAS,GACTvB,QAAS,MA4HXyC,WAAa,WACXC,EAAKC,SAAS,SAAAH,GAAK,MAAK,CACtBF,YAAaE,EAAMF,iBAIvBM,WAAa,SAACtC,EAAGuC,GAAM,IACd5C,EAAayC,EAAKF,MAAlBvC,UACH6C,EAAWrB,OAAOC,OAAO,GAAIzB,GAEjC,IACE,IAAI6C,EAASxC,GAAGuC,GAGd,KAAM,cAFNH,EAAKK,WAAWzC,EAAGuC,EAAGC,GAIxB,MAAO/B,GACP2B,EAAKM,WAAW1C,EAAGuC,EAAGC,GAGxBJ,EAAKC,SAAS,CACZ1C,UAAW6C,OAIfG,eAAiB,WACfP,EAAKC,SAAS,CAAC1C,UAAW,QAG5BiD,WAAa,SAAAnC,GAEXA,EAAEoC,iBAEF,IAAIC,EAAoB,CACtB9B,EAAGoB,EAAKF,MAAMzC,eAAeuB,EAC7Bf,EAAGmC,EAAKF,MAAMzC,eAAeQ,GAG/B,GAAIQ,EAAEsC,UAAYzB,EAChBwB,EAAkB9B,SACb,GAAIP,EAAEsC,UAAYxB,EACvBuB,EAAkB9B,SACb,GAAIP,EAAEsC,UAAYvB,EACvBsB,EAAkB7C,QACb,IAAIQ,EAAEsC,UAAYtB,EAIvB,OAHAqB,EAAkB7C,IAMpBmC,EAAKC,SAAS,CAAC5C,eAAgBqD,wFA5Kb,IAAAE,EAAAC,KAClBC,OAAOC,iBAAiB,UAAWF,KAAKL,YAExCQ,YAAY,WACWJ,EAAKd,MAAnBF,YAELgB,EAAKK,QAEN,oDAIHH,OAAOI,oBAAoB,UAAWL,KAAKL,mDAG9B5C,EAAGuC,GAKhB,IALmB,IACZ5C,EAAasD,KAAKf,MAAlBvC,UACH4D,EAAiB,GACjBC,EAAiB,GAEZC,EAAUzD,EAAI,EAAGyD,GAAWzD,EAAI,EAAGyD,IAC1C,IAAK,IAAIC,EAAUnB,EAAI,EAAGmB,GAAWnB,EAAI,EAAGmB,IAC1C,GAAI1D,IAAMyD,GAAWlB,IAAMmB,EAC3B,SACsCC,IAAhChE,EAAU8D,GAASC,GACrBH,EAAe3C,KAAK,CAClBI,EAAGyC,EACHxD,EAAGyD,IAKLF,EAAe5C,KAAK,CAClBI,EAAGyC,EACHxD,EAAGyD,IAGP,MAAOjD,GACP+C,EAAe5C,KAAK,CAClBI,EAAGyC,EACHxD,EAAGyD,IAMX,MAAO,CACLH,iBACAC,qDAIOxD,EAAGuC,EAAGxC,GAEf,IAEEA,EAAMC,GAAGuC,IAAK,EACd,MAAO9B,GAEPV,EAAMC,GAAK,GACXD,EAAMC,GAAGuC,IAAK,sCAIPvC,EAAGuC,EAAGxC,GACf,IAGMoB,OAAOyC,KAAK7D,EAAMC,IAAI6D,QAAU,SAC3B9D,EAAMC,UAEND,EAAMC,GAAGuC,GAElB,MAAO9B,iDAKSV,GAClB,IAAI+D,EAAQ,EAIZ,OAHA3C,OAAOyC,KAAK7D,GAAOgE,QAAQ,SAAAC,GACzBF,GAAS3C,OAAOyC,KAAK7D,EAAMiE,IAASH,SAE/BC,iCAGF,IAAAG,EAAAhB,KAKEtD,EAAasD,KAAKf,MAAlBvC,UACHuE,EAAe,GACnB/C,OAAOyC,KAAKjE,GAAWoE,QAAQ,SAAAC,GAC7B7C,OAAOyC,KAAKjE,EAAUqE,IAASD,QAAQ,SAAAI,GAAU,IAAAC,EAClC,CAACC,SAASL,GAASK,SAASF,IAApCnE,EAD0CoE,EAAA,GACvC7B,EADuC6B,EAAA,GAAAE,EAENL,EAAKM,eAAevE,EAAGuC,GAAzDgB,EAFwCe,EAExCf,eAAgBC,EAFwBc,EAExBd,eAEnBD,EAAeM,QAAU,GAAKN,EAAeM,QAAU,GACzDI,EAAKvB,WAAW1C,EAAGuC,EAAG2B,GAKxBV,EAAeO,QAAQ,SAAAS,GAES,IADLP,EAAKM,eAAeC,EAASxD,EAAGwD,EAASvE,GAA3DsD,eACYM,QAGjBI,EAAKvB,WAAW8B,EAASxD,EAAGwD,EAASvE,EAAGiE,SAMhDjB,KAAKZ,SAAS,CACZL,WAAYiB,KAAKwB,oBAAoBP,GAAgB,EACrDvE,UAAWuE,qCA0DN,IAAAQ,EAOHzB,KAAKf,MALPjB,EAFKyD,EAELzD,QACAvB,EAHKgF,EAGLhF,QACAC,EAJK+E,EAIL/E,UACAqC,EALK0C,EAKL1C,WACAvC,EANKiF,EAMLjF,eAGF,OACES,EAAAC,EAAAC,cAACF,EAAAC,EAAMwE,SAAP,KACEzE,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAACwE,EAAD,CAAe5C,WAAYA,IAC3B9B,EAAAC,EAAAC,cAAA,mCAA2B6C,KAAKwB,oBAAoB9E,IACpDO,EAAAC,EAAAC,cAACyE,EAAD,CACEpF,eAAgBA,EAChBwB,QAASA,EACTvB,QAASA,EACTC,UAAWA,EACXE,MAAOoD,KAAKX,WACZ1C,SAAUoC,IAEZ9B,EAAAC,EAAAC,cAAC0E,EAAD,CACEnD,KAAMK,EAAa,QAAU,QAC7BnC,MAAOoD,KAAKd,WACZP,aAAcI,EAAa,QAAU,KAEvC9B,EAAAC,EAAAC,cAAC0E,EAAD,CACEnD,KAAMK,EAAa,KAAO,QAC1BnC,MAAOoD,KAAKN,eACZ/C,SAAUoC,YAzNF+C,aCpClBC,IAASC,OAAO/E,EAAAC,EAAAC,cAAC8E,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ea8711e1.chunk.js","sourcesContent":["import React from 'react';\n\nconst GridRow = ({\n  startingCorner,\n  numCols,\n  liveCells,\n  disabled,\n  click,\n  row,\n}) => {\n  var cells = [];\n  let button;\n\n  for (var i = startingCorner.y; i < startingCorner.y + numCols; i++) {\n    button = <button disabled={disabled} onClick={click.bind(this, row, i)} />;\n\n    let cell;\n    let classNames = 'grid-cell';\n    classNames += !disabled ? ' hover' : '';\n\n    try {\n      if (liveCells[row][i]) {\n        classNames += ' live';\n      }\n    } catch (e) {}\n\n    cell = (\n      <div className={classNames} key={i}>\n        {button}\n      </div>\n    );\n\n    cells.push(cell);\n  }\n  return <div className=\"grid-row\"> {cells}</div>;\n};\n\nconst Grid = props => {\n  var rows = [];\n  for (\n    var i = props.startingCorner.x;\n    i < props.startingCorner.x + props.numRows;\n    i++\n  ) {\n    rows.push(<GridRow key={i} row={i} {...props} />);\n  }\n  return <div className=\"grid\">{rows}</div>;\n};\n\nexport default Grid;\n","import React, {Component} from 'react';\nimport Grid from './Grid';\n\nconst messages = {\n  stop: 'Use arrow keys to move window.',\n  start: 'Simulation has started.',\n  instruction: 'Select any number cells to be live and click start.',\n  pause: 'Click pause to stop the simulation.',\n};\n\nconst DOWN_KEYCODE = 40;\nconst UP_KEYCODE = 38;\nconst LEFT_KEYCODE = 37;\nconst RIGHT_KEYCODE = 39;\n\nconst GameButton = ({text, click, customStyles, disabled}) => (\n  <div className={`game-button ${customStyles}`}>\n    <button onClick={click} disabled={disabled}>\n      <b>{text}</b>\n    </button>\n  </div>\n);\n\nconst MessageHeader = ({hasStarted}) => {\n  if (hasStarted) {\n    return (\n      <b>\n        <p>{messages.start}</p>\n        <p>{messages.pause}</p>\n      </b>\n    );\n  }\n  return (\n    <b>\n      <p>{messages.stop}</p>\n      <p>{messages.instruction}</p>\n    </b>\n  );\n};\n\nclass App extends Component {\n  state = {\n    startingCorner: {\n      x: 0,\n      y: 0,\n    },\n    liveCells: {},\n    hasStarted: false,\n    numRows: 12,\n    numCols: 12,\n  };\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.moveWindow);\n\n    setInterval(() => {\n      const {hasStarted} = this.state;\n      if (hasStarted) {\n        this.tick();\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.moveWindow);\n  }\n\n  findNeighbours(i, j) {\n    const {liveCells} = this.state;\n    let liveNeighbours = [];\n    let deadNeighbours = [];\n\n    for (let currRow = i - 1; currRow <= i + 1; currRow++) {\n      for (let currCol = j - 1; currCol <= j + 1; currCol++) {\n        if (i === currRow && j === currCol) continue;\n        try {\n          if (liveCells[currRow][currCol] !== undefined) {\n            liveNeighbours.push({\n              x: currRow,\n              y: currCol,\n            });\n          } else {\n            // Consider case where column element\n            // does not exist in this row.\n            deadNeighbours.push({\n              x: currRow,\n              y: currCol,\n            });\n          }\n        } catch (e) {\n          deadNeighbours.push({\n            x: currRow,\n            y: currCol,\n          });\n        }\n      }\n    }\n\n    return {\n      liveNeighbours,\n      deadNeighbours,\n    };\n  }\n\n  insertCell(i, j, cells) {\n    // console.log(i, j, cells);\n    try {\n      // There are other live cells in that row.\n      cells[i][j] = true;\n    } catch (e) {\n      // First live cell in this row.\n      cells[i] = {};\n      cells[i][j] = true;\n    }\n  }\n\n  removeCell(i, j, cells) {\n    try {\n      // Suppose you deleted the last cell of this row,\n      // remove empty object in this row.\n      if (Object.keys(cells[i]).length <= 1) {\n        delete cells[i];\n      } else {\n        delete cells[i][j];\n      }\n    } catch (e) {\n      // Row does not have any live cells.\n    }\n  }\n\n  countTotalLiveCells(cells) {\n    let total = 0;\n    Object.keys(cells).forEach(rowStr => {\n      total += Object.keys(cells[rowStr]).length;\n    });\n    return total;\n  }\n\n  tick() {\n    // 1. Any live cell with < 2 live neighbours die.\n    // 2. Any live cell with 2 or 3 live neighbours live.\n    // 3. Any live cell with > 3 live neighbours die.\n    // 4. Any dead cell with exactly 3 live neighbours becomes live.\n    const {liveCells} = this.state;\n    let newLiveCells = {};\n    Object.keys(liveCells).forEach(rowStr => {\n      Object.keys(liveCells[rowStr]).forEach(colStr => {\n        let [i, j] = [parseInt(rowStr), parseInt(colStr)];\n        const {liveNeighbours, deadNeighbours} = this.findNeighbours(i, j);\n        // If live cell stays alive, insert it into newLiveCells.\n        if (liveNeighbours.length >= 2 && liveNeighbours.length <= 3) {\n          this.insertCell(i, j, newLiveCells);\n        }\n\n        // Dead neighbours becoming live.\n        // What if 2 live cell share the same dead neighbours???\n        deadNeighbours.forEach(deadCell => {\n          const {liveNeighbours} = this.findNeighbours(deadCell.x, deadCell.y);\n          if (liveNeighbours.length === 3) {\n            // If a cell is already inserted, the method should\n            // not double add.\n            this.insertCell(deadCell.x, deadCell.y, newLiveCells);\n          }\n        });\n      });\n    });\n\n    this.setState({\n      hasStarted: this.countTotalLiveCells(newLiveCells) > 0,\n      liveCells: newLiveCells,\n    });\n  }\n\n  toggleLife = () => {\n    this.setState(state => ({\n      hasStarted: !state.hasStarted,\n    }));\n  };\n\n  toggleCell = (i, j) => {\n    const {liveCells} = this.state;\n    let newCells = Object.assign({}, liveCells);\n\n    try {\n      if (newCells[i][j]) {\n        this.removeCell(i, j, newCells);\n      } else {\n        throw 'insert cell';\n      }\n    } catch (e) {\n      this.insertCell(i, j, newCells);\n    }\n\n    this.setState({\n      liveCells: newCells,\n    });\n  };\n\n  clearLiveCells = () => {\n    this.setState({liveCells: {}});\n  };\n\n  moveWindow = e => {\n    // Prevents scrolling when using arrow keys.\n    e.preventDefault();\n\n    let newStartingCorner = {\n      x: this.state.startingCorner.x,\n      y: this.state.startingCorner.y,\n    };\n\n    if (e.keyCode === DOWN_KEYCODE) {\n      newStartingCorner.x++;\n    } else if (e.keyCode === UP_KEYCODE) {\n      newStartingCorner.x--;\n    } else if (e.keyCode === LEFT_KEYCODE) {\n      newStartingCorner.y--;\n    } else if (e.keyCode === RIGHT_KEYCODE) {\n      newStartingCorner.y++;\n    } else {\n      // Don't updating state.\n      return;\n    }\n\n    this.setState({startingCorner: newStartingCorner});\n  };\n\n  render() {\n    const {\n      numRows,\n      numCols,\n      liveCells,\n      hasStarted,\n      startingCorner,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1> Conway's Game of Life </h1>\n        <MessageHeader hasStarted={hasStarted} />\n        <p>Number of Live Cells : {this.countTotalLiveCells(liveCells)}</p>\n        <Grid\n          startingCorner={startingCorner}\n          numRows={numRows}\n          numCols={numCols}\n          liveCells={liveCells}\n          click={this.toggleCell}\n          disabled={hasStarted}\n        />\n        <GameButton\n          text={hasStarted ? 'pause' : 'start'}\n          click={this.toggleLife}\n          customStyles={hasStarted ? 'pause' : ''}\n        />\n        <GameButton\n          text={hasStarted ? '--' : 'clear'}\n          click={this.clearLiveCells}\n          disabled={hasStarted}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}